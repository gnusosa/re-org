* ReOrg

An Org mode file organizer.

** Motivation

Instead of having tons of sparsed Org mode files everywhere,
this project attemtps to give the Org mode writer a framework
to re-organize the files in a less chaotic manner.

** Installation

Add this line to your application's Gemfile:

#+BEGIN_SRC sh
    gem 're-org'
#+END_SRC

And then execute:

#+BEGIN_SRC sh
    $ bundle
#+END_SRC

Or install it yourself as:

#+BEGIN_SRC sh
    $ gem install re-org
#+END_SRC

** Usage

This library uses ~docopt~ so these are self-documenting:

#+BEGIN_SRC sh :results output
cat bin/re-org
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
#!/usr/bin/env ruby
# -*- mode: ruby -*-
require 'docopt'
require 're-org'

doc = <<OPTIONS

re-org : A tool to help re-organize your texts written in Org mode

Usage:
  re-org new <template> [--notebook=<notebook>] [--path=<path>] [--title=<title>]
  re-org setup          [--notebook=<notebook>] [--path=<path>]
  re-org status         [--notebook=<notebook>] [--path=<path>]
  re-org update-notebook  <notebook>            [--path=<path>] [--force]
  re-org compile-notebook <notebook>            [--path=<path>] [--title=<title>] [--force]

Options:

  -h --help               Show this screen.
  --version               Show this version.

OPTIONS

begin
  require "pp"
  cmd = Docopt::docopt(doc)
rescue Docopt::Exit => e
  puts e.message
end

exit 1 unless cmd

o = ReOrg::Command.new(cmd)
o.execute!
#+END_EXAMPLE

** Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Added some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request
